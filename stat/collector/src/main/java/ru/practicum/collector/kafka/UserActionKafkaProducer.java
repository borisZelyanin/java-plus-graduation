package ru.practicum.collector.kafka;

import jakarta.annotation.PreDestroy;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.avro.specific.SpecificRecord;
import org.apache.avro.specific.SpecificRecordBase;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.header.internals.RecordHeader;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Component;
import ru.practicum.collector.config.CollectorProperties;
import ru.practicum.ewm.stats.avro.UserActionAvro;

import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.util.concurrent.CompletableFuture;

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ Kafka (Avro).
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class UserActionKafkaProducer {

    /** –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω: –∫–ª—é—á Long, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Avro (UserActionAvro). */
    private final KafkaTemplate<Long, SpecificRecordBase> kafkaTemplate;
    private final CollectorProperties props;

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–æ–ø–∏–∫ {@code collector.user-actions}.
     * –ö–ª—é—á–æ–º –≤—ã—Å—Ç—É–ø–∞–µ—Ç {@code eventId}, —Ç–∞–π–º—Å—Ç–µ–º–ø –±–µ—Ä—ë—Ç—Å—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –±—Ä–æ–∫–µ—Ä–µ.
     */
    public CompletableFuture<SendResult<Long, SpecificRecordBase>> send(UserActionAvro payload) {
        final String topic = props.getTopicUserActions();
        final Long key = payload.getEventId(); // –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–æ–±—ã—Ç–∏—é
        final Long tsMillis = extractTimestampMillis(payload);

        // –ø–æ—Å—Ç—Ä–æ–∏–º –∑–∞–ø–∏—Å—å –∏ –¥–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –¥–µ–±–∞–≥–∞
        ProducerRecord<Long, SpecificRecordBase> record = new ProducerRecord<>(topic, null, tsMillis, key, payload);
        record.headers()
                .add(new RecordHeader("x-user-id", String.valueOf(payload.getUserId()).getBytes(StandardCharsets.UTF_8)))
                .add(new RecordHeader("x-event-id", String.valueOf(payload.getEventId()).getBytes(StandardCharsets.UTF_8)))
                .add(new RecordHeader("x-action-type", String.valueOf(payload.getActionType()).getBytes(StandardCharsets.UTF_8)));

        log.debug("‚û°Ô∏è  Kafka send: topic={}, key={}, ts={}, payload={}",
                topic, key, tsMillis, shortPayload(payload));

        CompletableFuture<SendResult<Long, SpecificRecordBase>> future = kafkaTemplate.send(record);

        future.whenComplete((res, ex) -> {
            if (ex != null) {
                log.error("‚ùå Kafka send FAILED: topic={}, key={}, reason={}", topic, key, ex.toString(), ex);
            } else if (res != null && res.getRecordMetadata() != null) {
                var md = res.getRecordMetadata();
                log.info("‚úÖ Kafka send OK: topic={} partition={} offset={} key={}",
                        md.topic(), md.partition(), md.offset(), key);
            } else {
                log.warn("‚ö†Ô∏è Kafka send completed without metadata: topic={}, key={}", topic, key);
            }
        });

        return future;
    }

    /**
     * –û—Å—Ç–æ—Ä–æ–∂–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –∏–∑ Avro-–ø–æ–ª—è timestamp.
     * –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Avro —ç—Ç–æ –ø–æ–ª–µ –º–æ–∂–µ—Ç –±—ã—Ç—å Long (logicalType=timestamp_millis)
     * –∏–ª–∏ java.time.Instant. –ü–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.
     */
    private Long extractTimestampMillis(UserActionAvro msg) {
        try {
            Object ts = msg.get("timestamp"); // generic –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—é
            if (ts == null) return System.currentTimeMillis();

            if (ts instanceof Long l) {
                return l;
            }
            if (ts instanceof Instant inst) {
                return inst.toEpochMilli();
            }
        } catch (Exception ignore) {
            // —É–ø–∞–¥—ë–º –≤ –¥–µ—Ñ–æ–ª—Ç
        }
        return System.currentTimeMillis();
    }

    /**
     * –ö–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤ (–±–µ–∑ —Å–ø–∞–º–∞ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–æ–º).
     */
    private String shortPayload(UserActionAvro p) {
        return "UserActionAvro{userId=%d,eventId=%d,action=%s}".formatted(
                p.getUserId(), p.getEventId(), p.getActionType()
        );
    }

    @PreDestroy
    public void close() {
        try {
            log.info("üõë Shutting down KafkaTemplate");
            kafkaTemplate.flush();
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error on KafkaTemplate flush: {}", e.toString(), e);
        }
    }
}