package ru.practicum.aggregator;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.errors.WakeupException;
import org.springframework.stereotype.Component;
import ru.practicum.aggregator.config.AggregatorProperties;
import ru.practicum.aggregator.logic.SimilarityAggregator;
import ru.practicum.ewm.stats.avro.EventSimilarityAvro;
import ru.practicum.ewm.stats.avro.UserActionAvro;

import java.time.Duration;
import java.util.List;
import java.util.Objects;

@RequiredArgsConstructor
@Component
@Slf4j
public class AggregationStarter {

    private final Consumer<String, UserActionAvro> consumer;
    private final Producer<String, EventSimilarityAvro> producer;
    private final SimilarityAggregator aggregator; // —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞
    private final AggregatorProperties props;

    public void start() {
        validateProps();

        final String inputTopic = props.getUserActions();
        final String outputTopic = props.getEventsSimilarity();
        final Duration pollTimeout = Duration.ofMillis(
                props.getPollTimeoutMs() != null ? props.getPollTimeoutMs() : 2000
        );

        consumer.subscribe(List.of(inputTopic));
        log.info("üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: {}", inputTopic);

        try {
            for(;;) {
                var records = consumer.poll(pollTimeout);

                if (records.isEmpty()) {
                    continue;
                }
                records.forEach(record -> {
                    UserActionAvro event = record.value();
                    if (event == null) {
                        log.warn("‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (partition={}, offset={})",
                                record.partition(), record.offset());
                        return;
                    }

                    log.debug("‚û° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ userId={}, eventId={}, action={}",
                            event.getUserId(), event.getEventId(), event.getActionType());

                    // –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 0..N –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
                    aggregator.updateState(event).ifPresent(similarities -> {
                        for (EventSimilarityAvro sim : similarities) {
                            // –∫–ª—é—á–æ–º –¥–µ–ª–∞–µ–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—É—é –ø–∞—Ä—É, —á—Ç–æ–±—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–∞—Ä—ã —à–ª–∏ –≤ –æ–¥–∏–Ω partition (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
                            String key = sim.getEventA() + "_" + sim.getEventB();

                            ProducerRecord<String, EventSimilarityAvro> recordOut =
                                    new ProducerRecord<>(outputTopic, key, sim);

                            producer.send(recordOut, (metadata, ex) -> {
                                if (ex != null) {
                                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ similarity ({}): {}",
                                            key, ex.getMessage(), ex);
                                } else {
                                    log.debug("‚úÖ similarity –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: key={}, topic={}, partition={}, offset={}",
                                            key, metadata.topic(), metadata.partition(), metadata.offset());
                                }
                            });
                        }
                    });
                });

                consumer.commitAsync((offsets, ex) -> {
                    if (ex != null) {
                        log.warn("‚ö† –û—à–∏–±–∫–∞ commitAsync: {}", ex.getMessage(), ex);
                    }
                });
            }

        } catch (WakeupException ignored) {
            log.info("‚õî –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Wakeup)");
        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", e);
        } finally {
            try {
                consumer.commitSync();
            } catch (Exception e) {
                log.warn("‚ö† –û—à–∏–±–∫–∞ commitSync –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {}", e.getMessage(), e);
            }
            // –∑–∞–∫—Ä—ã–≤–∞–µ–º consumer/producer –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
            safeCloseConsumer();
            safeCloseProducer();
        }
    }

    private void validateProps() {
        if (isBlank(props.getEventsSimilarity()) || isBlank(props.getUserActions())) {
            throw new IllegalStateException("Kafka topics –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã: inputTopic=" +
                    props.getUserActions() + ", outputTopic=" + props.getEventsSimilarity());
        }
    }

    private boolean isBlank(String s) {
        return s == null || s.isBlank();
    }

    private void safeCloseConsumer() {
        try {
            consumer.close();
            log.info("üì¥ Consumer –∑–∞–∫—Ä—ã—Ç");
        } catch (Exception e) {
            log.warn("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ consumer: {}", e.getMessage(), e);
        }
    }

    private void safeCloseProducer() {
        try {
            producer.flush();
        } catch (Exception e) {
            log.warn("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ flush producer: {}", e.getMessage(), e);
        }
        try {
            producer.close();
            log.info("üì§ Producer –∑–∞–∫—Ä—ã—Ç");
        } catch (Exception e) {
            log.warn("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ producer: {}", e.getMessage(), e);
        }
    }
}